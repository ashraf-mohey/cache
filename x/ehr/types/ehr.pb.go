// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ehr/ehr.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Ehr struct {
	Creator               string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id                    uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	PatientId             uint64 `protobuf:"varint,3,opt,name=patientId,proto3" json:"patientId,omitempty"`
	DataHash              string `protobuf:"bytes,4,opt,name=dataHash,proto3" json:"dataHash,omitempty"`
	PatientSignature      string `protobuf:"bytes,5,opt,name=patientSignature,proto3" json:"patientSignature,omitempty"`
	OrganizationSignature string `protobuf:"bytes,6,opt,name=organizationSignature,proto3" json:"organizationSignature,omitempty"`
	Transferred           bool   `protobuf:"varint,7,opt,name=transferred,proto3" json:"transferred,omitempty"`
}

func (m *Ehr) Reset()         { *m = Ehr{} }
func (m *Ehr) String() string { return proto.CompactTextString(m) }
func (*Ehr) ProtoMessage()    {}
func (*Ehr) Descriptor() ([]byte, []int) {
	return fileDescriptor_07ef79f14c03c6ac, []int{0}
}
func (m *Ehr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ehr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ehr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ehr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ehr.Merge(m, src)
}
func (m *Ehr) XXX_Size() int {
	return m.Size()
}
func (m *Ehr) XXX_DiscardUnknown() {
	xxx_messageInfo_Ehr.DiscardUnknown(m)
}

var xxx_messageInfo_Ehr proto.InternalMessageInfo

func (m *Ehr) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Ehr) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Ehr) GetPatientId() uint64 {
	if m != nil {
		return m.PatientId
	}
	return 0
}

func (m *Ehr) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

func (m *Ehr) GetPatientSignature() string {
	if m != nil {
		return m.PatientSignature
	}
	return ""
}

func (m *Ehr) GetOrganizationSignature() string {
	if m != nil {
		return m.OrganizationSignature
	}
	return ""
}

func (m *Ehr) GetTransferred() bool {
	if m != nil {
		return m.Transferred
	}
	return false
}

func init() {
	proto.RegisterType((*Ehr)(nil), "ashrafmohey.cache.ehr.Ehr")
}

func init() { proto.RegisterFile("ehr/ehr.proto", fileDescriptor_07ef79f14c03c6ac) }

var fileDescriptor_07ef79f14c03c6ac = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xbd, 0x4a, 0xc4, 0x40,
	0x14, 0x85, 0x33, 0xd9, 0x75, 0x7f, 0x46, 0x14, 0x19, 0x58, 0x18, 0x44, 0x86, 0x60, 0x15, 0x05,
	0x93, 0x42, 0x9f, 0x40, 0x11, 0xb4, 0x8d, 0x9d, 0xdd, 0xdd, 0xe4, 0x6e, 0x66, 0x8a, 0x9d, 0x09,
	0x37, 0xb3, 0xe0, 0xfa, 0x14, 0x3e, 0x96, 0xe5, 0x96, 0x96, 0x92, 0xd4, 0xbe, 0x83, 0x38, 0xfe,
	0xac, 0xa0, 0xe5, 0xf9, 0xee, 0x39, 0xb7, 0xf8, 0xf8, 0x1e, 0x6a, 0xca, 0x51, 0x53, 0xd6, 0x90,
	0xf3, 0x4e, 0xcc, 0xa0, 0xd5, 0x04, 0x8b, 0xa5, 0xd3, 0xb8, 0xce, 0x4a, 0x28, 0x35, 0x66, 0xa8,
	0xe9, 0xf8, 0x8d, 0xf1, 0xc1, 0xb5, 0x26, 0x21, 0xf9, 0xb8, 0x24, 0x04, 0xef, 0x48, 0xb2, 0x84,
	0xa5, 0xd3, 0xe2, 0x3b, 0x8a, 0x7d, 0x1e, 0x9b, 0x4a, 0xc6, 0x09, 0x4b, 0x87, 0x45, 0x6c, 0x2a,
	0x71, 0xc4, 0xa7, 0x0d, 0x78, 0x83, 0xd6, 0xdf, 0x56, 0x72, 0x10, 0xf0, 0x16, 0x88, 0x43, 0x3e,
	0xa9, 0xc0, 0xc3, 0x0d, 0xb4, 0x5a, 0x0e, 0xc3, 0xa3, 0x9f, 0x2c, 0x4e, 0xf9, 0xc1, 0x57, 0xf1,
	0xce, 0xd4, 0x16, 0xfc, 0x8a, 0x50, 0xee, 0x84, 0xce, 0x1f, 0x2e, 0x2e, 0xf8, 0xcc, 0x51, 0x0d,
	0xd6, 0x3c, 0x82, 0x37, 0xce, 0x6e, 0x07, 0xa3, 0x30, 0xf8, 0xff, 0x28, 0x12, 0xbe, 0xeb, 0x09,
	0x6c, 0xbb, 0x40, 0x22, 0xac, 0xe4, 0x38, 0x61, 0xe9, 0xa4, 0xf8, 0x8d, 0x2e, 0xaf, 0x9e, 0x3b,
	0xc5, 0x36, 0x9d, 0x62, 0xaf, 0x9d, 0x62, 0x4f, 0xbd, 0x8a, 0x36, 0xbd, 0x8a, 0x5e, 0x7a, 0x15,
	0xdd, 0x9f, 0xd4, 0xc6, 0xeb, 0xd5, 0x3c, 0x2b, 0xdd, 0x32, 0xff, 0x74, 0x75, 0x16, 0x64, 0xe5,
	0x41, 0x56, 0xfe, 0xf0, 0xe1, 0x32, 0xf7, 0xeb, 0x06, 0xdb, 0xf9, 0x28, 0x28, 0x3d, 0x7f, 0x0f,
	0x00, 0x00, 0xff, 0xff, 0x9c, 0xb2, 0x0e, 0x37, 0x63, 0x01, 0x00, 0x00,
}

func (m *Ehr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ehr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ehr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Transferred {
		i--
		if m.Transferred {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.OrganizationSignature) > 0 {
		i -= len(m.OrganizationSignature)
		copy(dAtA[i:], m.OrganizationSignature)
		i = encodeVarintEhr(dAtA, i, uint64(len(m.OrganizationSignature)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PatientSignature) > 0 {
		i -= len(m.PatientSignature)
		copy(dAtA[i:], m.PatientSignature)
		i = encodeVarintEhr(dAtA, i, uint64(len(m.PatientSignature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintEhr(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.PatientId != 0 {
		i = encodeVarintEhr(dAtA, i, uint64(m.PatientId))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintEhr(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEhr(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEhr(dAtA []byte, offset int, v uint64) int {
	offset -= sovEhr(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Ehr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEhr(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovEhr(uint64(m.Id))
	}
	if m.PatientId != 0 {
		n += 1 + sovEhr(uint64(m.PatientId))
	}
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovEhr(uint64(l))
	}
	l = len(m.PatientSignature)
	if l > 0 {
		n += 1 + l + sovEhr(uint64(l))
	}
	l = len(m.OrganizationSignature)
	if l > 0 {
		n += 1 + l + sovEhr(uint64(l))
	}
	if m.Transferred {
		n += 2
	}
	return n
}

func sovEhr(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEhr(x uint64) (n int) {
	return sovEhr(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Ehr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEhr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ehr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ehr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEhr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEhr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEhr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEhr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientId", wireType)
			}
			m.PatientId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEhr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PatientId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEhr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEhr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEhr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEhr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEhr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEhr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEhr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEhr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEhr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transferred", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEhr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Transferred = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEhr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEhr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEhr(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEhr
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEhr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEhr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEhr
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEhr
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEhr
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEhr        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEhr          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEhr = fmt.Errorf("proto: unexpected end of group")
)
